from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from database.models import Word
from database.db import get_db
from keyboards import main_menu
from sqlalchemy import func

router = Router()

waiting_for_answer = {}
user_scores = {}


async def get_random_word(user_id: int):
    db = next(get_db())
    return db.query(Word).filter_by(is_learned=False).order_by(func.random()).first()


async def get_progress_stats(user_id: int):
    db = next(get_db())
    try:
        total_words = db.query(Word).count()
        learned_words = db.query(Word).filter_by(is_learned=True).count()
        return total_words, learned_words
    finally:
        db.close()


@router.message(Command("quiz"))
@router.message(F.text == "‚ùì –ö–≤–∏–∑")
async def start_learning(message: types.Message, bot: Bot):
    word = await get_random_word(message.from_user.id)

    if not word:
        await message.answer("üéâ –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞!", reply_markup=main_menu)
        return

    waiting_for_answer[message.from_user.id] = word

    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥"))
    builder.row(types.KeyboardButton(text="–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ"))
    builder.row(types.KeyboardButton(text="–ü–æ–¥—Å–∫–∞–∑–∫–∞"))
    builder.row(types.KeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å"))
    builder.row(types.KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))

    await message.answer(
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ: <b>{word.english}</b>?\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@router.message(F.text == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: types.Message):
    total, learned = await get_progress_stats(message.from_user.id)
    progress_percent = (learned / total * 100) if total > 0 else 0

    progress_bar = "üü©" * int(progress_percent / 10) + "‚¨úÔ∏è" * (10 - int(progress_percent / 10))

    await message.answer(
        f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
        f"{progress_bar} {progress_percent:.1f}%\n\n"
        f"‚úÖ –ò–∑—É—á–µ–Ω–æ: {learned} —Å–ª–æ–≤\n"
        f"üìö –í—Å–µ–≥–æ: {total} —Å–ª–æ–≤\n\n"
        f"üèÜ –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {user_scores.get(message.from_user.id, 0)}",
        parse_mode="HTML"
    )


@router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥")
async def show_translation(message: types.Message):
    if message.from_user.id not in waiting_for_answer:
        return
    word = waiting_for_answer[message.from_user.id]
    await message.answer(f"üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥: <b>{word.russian}</b>", parse_mode="HTML")


@router.message(F.text == "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ")
async def next_word(message: types.Message, bot: Bot):
    await start_learning(message, bot)


@router.message(F.text == "–ü–æ–¥—Å–∫–∞–∑–∫–∞")
async def give_hint(message: types.Message):
    if message.from_user.id not in waiting_for_answer:
        return

    word = waiting_for_answer[message.from_user.id]
    hint = word.russian[:3] + "..."
    await message.answer(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ <b>{hint}</b>", parse_mode="HTML")


@router.message(F.text.casefold() == "–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    if message.from_user.id in waiting_for_answer:
        del waiting_for_answer[message.from_user.id]

    if message.from_user.id in user_scores:
        del user_scores[message.from_user.id]

    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )


@router.message(F.text)
async def check_answer(message: types.Message, bot: Bot):
    if message.from_user.id not in waiting_for_answer:
        return

    word = waiting_for_answer[message.from_user.id]
    user_answer = message.text.strip().lower()

    if user_answer == "‚Ü©Ô∏è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await back_to_menu(message)
        return
    if user_answer == "üìä –ø—Ä–æ–≥—Ä–µ—Å—Å":
        await show_progress(message)
        return

    if user_answer == word.russian.lower():
        db = next(get_db())
        try:
            word.is_learned = True
            db.commit()
        finally:
            db.close()

        user_scores[message.from_user.id] = user_scores.get(message.from_user.id, 0) + 1
        await message.answer(
            f"‚úÖ –í–µ—Ä–Ω–æ! –í–∞—à —Å—á–µ—Ç: {user_scores[message.from_user.id]}",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{word.russian}</b>",
            parse_mode="HTML"
        )

    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ"))
    builder.row(types.KeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å"))
    builder.row(types.KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    await message.answer(
        "–ü—Ä–æ–¥–æ–ª–∂–∏–º?",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )